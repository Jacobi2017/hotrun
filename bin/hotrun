#!/usr/bin/env node

/*
  author:
    aaron.xiao - <admin@veryos.com>
  summary:
    hotrun is a node app runner that lets you hot-compile or reload the app on source file changes
*/

const fs = require('fs');
const path = require('path');
const { fork } = require('child_process');
const program = require('commander');
const chokidar = require('chokidar');
const pkg = require('../package.json');
const log = require('../lib/log');

const cwd = process.cwd();
const collect = function (val, memo) {
  memo.push(val);
  return memo
};

program
  .option('-i, --inspect [port]', 'Enable inspect mode on port')
  .option('-b, --inspect-brk', 'Enable debug break mode')
  .option('-c, --config [path]', 'Specify a json config file')
  .option('-e, --extensions [extensions]  ', 'List of extensions to hook into [.es6,.js,.es,.jsx]')
  .option('-w, --watch [dir]', 'Watch directory "dir" or files, to hot compile', collect, [])
  .option('-f, --force [dir]', 'Force restart if directory "dir" or files changed', collect, [])
  .option('-x, --exclude [dir]', 'Exclude matching directory/files from watcher', collect, [])
  .option('-p, --use-polling', 'In some filesystems watch events may not work correcly. This option enables "polling" which should mitigate this type of issues')
  .version(pkg.version)
  .usage('[options] [script.js] [args]')
  .description('hotrun is a node app runner that lets you hot-compile or reload the app on source file changes')
  .parse(process.argv);

const mainModule = program.args[ 0 ];
if (!mainModule) {
  log('main script not specified', 3);
  process.exit(1)
}
program.args[ 0 ] = toAbsUrl(mainModule);

let configUrl = program.config || 'hotrun.json';
let configPath = toAbsUrl(configUrl);
let config = {};
if (fs.existsSync(configPath)) {
  config = require(configPath);
  log(`using config ${ configUrl }`)
} else {
  Object.assign(config, program)
}

let childApp, watcherReady;
const forces = toArray(config.force).map(toAbsUrl);
const excludes = [ path.join(cwd, 'node_modules') ].concat(toArray(config.exclude).map(toAbsUrl));
const watches = toArray(config.watch).map(toAbsUrl);
if (watches.length > 0) {
  forces.forEach(f => {
    if (watches.some(w => f.indexOf(w) === -1)) {
      watches.push(f);
    }
  });
} else {
  watches = watches.concat(forces);
}
const watcher = chokidar.watch(watches, {
  persistent: true,
  ignored: excludes,
  ignoreInitial: true,
  usePolling: config.usePolling,
});
watcherReady = watches.length === 0;

process.on('SIGINT', () => {
  watcher.close();
  process.exit(0)
});

watcher.on('change', handleChange);
watcher.on('add', handleChange);
watcher.on('unlink', handleChange);
watcher.on('ready', () => {
  if (watcherReady) return;
  watcherReady = true;
  startApp()
});
watcher.on('error', (error) => {
  log('watcher failed', 3);
  console.error(error);
  process.exit(1)
});

restartApp();

function restartApp() {
  if (!watcherReady) return
  if (watcherReady && childApp) {
    var message = config.message ? config.message : '>>> restarting <<<';
    log(message, 2);
    killApp()
  } else {
    startApp()
  }
}

function killApp() {
  if (childApp) {
    childApp.on('exit', () => {
      startApp()
    });
    try {
      childApp.kill('SIGHUP')
    } catch (error) {
      childApp.kill('SIGKILL')
    }
    childApp = null
  }
}

function startApp() {
  const execArgv = process.execArgv.slice(0);
  if (config.inspect) {
    execArgv.push('--inspect=' + config.inspect);
  }
  if (config.inspectBrk) {
    execArgv.push('--inspect-brk');
  }
  const app = fork(path.resolve(__dirname, 'runner.js'), { execArgv: execArgv });
  app.send({
    action: 'START',
    args: program.args,
    extensions: config.extensions || [ '.js' ]
  });
  childApp = app
}

function handleChange(filename) {
  filename = toAbsUrl(filename);
  if (shouldRestart(filename)) {
    return restartApp()
  }
  if (childApp) {
    childApp.send({
      action: 'COMPILE',
      filename: filename
    })
  }
}

function shouldRestart(filename) {
  if (!forces.length) return false
  return forces.some(x => filename.indexOf(x) > -1)
}

function toAbsUrl(url) {
  return (url.startsWith('/') || /^[a-z]+:\\/i.test(url)) ? url : path.join(cwd, url)
}

function toArray(obj) {
  return Array.isArray(obj) ? obj : typeof obj === 'string' ? [ obj ] : []
}
